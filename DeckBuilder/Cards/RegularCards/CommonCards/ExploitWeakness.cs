using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DeityOnceLost.DeckBuilder.Cards.RegularCards.CommonCards
{
    /// <summary>
    /// Exploit Weakness | Common
    ///     (Costs 2 Divinity)
    /// Apply 2 Feeble.
    /// Apply 2 Vulnerable.
    /// Draw 1 card.
    /// </summary>
    class ExploitWeakness : DoubleDebuffCard, IDrawCard
    {
        public const String NAME = "Exploit Weakness";
        public const CardEnums.CardType CARDTYPE = CardEnums.CardType.SKILL;
        public const CardEnums.CardRarity RARITY = CardEnums.CardRarity.COMMON;
        public const int PLAYCOST_DIV = 2;
        public const int FEEBLE_DURATION = 2;
        public const int VULNERABLE_DURATION = 2;
        public const int CARD_DRAW = 1;

        public ExploitWeakness(int feebleDuration = FEEBLE_DURATION, int vulnerableDuration = VULNERABLE_DURATION) : base(NAME, CARDTYPE, RARITY,
            Combat.Buff.buffType.feeble, Combat.Buff.buffType.vulnerable, feebleDuration, vulnerableDuration, 1, 1, true, true, false, false)
        {
            iDrawAmount = CARD_DRAW;

            addPlayCost(CardEnums.CostType.DIVINITY, PLAYCOST_DIV);
        }

        public int iDrawAmount { get; }

        public override void onPlay()
        {
            base.onPlay();
            iCardDraw();
        }

        public void iCardDraw()
        {
            Game1.getChamp().getDeck().drawNumCards(iDrawAmount);
        }

        public override List<String> getDescription(Characters.Champion champ, bool activeCard = false)
        {
            List<String> desc = new List<String>();

            String drawCardString = "Draw " + iDrawAmount + " card";
            if (iDrawAmount > 1)
            {
                drawCardString += "s";
            }
            drawCardString += ".";

            desc.Add("Apply " + iBuffDuration + " " + Combat.Buff.buffString(iBuffType) + ".");
            desc.Add("Apply " + iBuffDuration2 + " " + Combat.Buff.buffString(iBuffType2) + ".");
            desc.Add(drawCardString);

            return desc;
        }

        public override List<String> getStylizedDescription(Characters.Champion champ, int descFontSize, bool activeCard = false)
        {
            List<String> desc = new List<String>();

            desc.Add(CardStylizing.basicApplyDebuffString(FEEBLE_DURATION, iBuffDuration, iBuffType, descFontSize));
            desc.Add(CardStylizing.basicApplyDebuffString(VULNERABLE_DURATION, iBuffDuration2, iBuffType2, descFontSize));
            desc.Add(CardStylizing.basicCardDrawString(CARD_DRAW, iDrawAmount, descFontSize));

            return desc;
        }

        public override Card getNewCard()
        {
            return new ExploitWeakness();
        }

        public override Card getEmpoweredCard()
        {
            return new EmpoweredCards.CommonCards.ExploitWeakness_Empowered();
        }
    }
}
